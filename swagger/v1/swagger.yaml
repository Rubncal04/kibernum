---
openapi: 3.0.1
info:
  title: Kibernum Ecommerce API
  version: v1
  description: A comprehensive ecommerce API with product management, customer tracking,
    purchase processing, and administrative features with JWT authentication and audit
    logging.
  contact:
    name: Kibernum Development Team
paths:
  "/api/v1/activity_logs":
    get:
      summary: List activity logs
      tags:
      - Activity Logs
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        in: query
        required: false
        description: Filter by user ID
        schema:
          type: integer
      - name: scope_type
        in: query
        required: false
        description: Filter by scope type (Product, Category)
        schema:
          type: string
      - name: scope_id
        in: query
        required: false
        description: Filter by scope ID
        schema:
          type: integer
      - name: action
        in: query
        required: false
        description: Filter by action (create, update, destroy)
        schema:
          type: string
      - name: page
        in: query
        required: false
        description: Page number
        schema:
          type: integer
      - name: per_page
        in: query
        required: false
        description: Items per page
        schema:
          type: integer
      responses:
        '200':
          description: activity logs list
        '403':
          description: forbidden
        '401':
          description: unauthorized
  "/api/v1/activity_logs/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: integer
    get:
      summary: Get activity log
      tags:
      - Activity Logs
      security:
      - bearerAuth: []
      responses:
        '200':
          description: activity log found
        '404':
          description: activity log not found
        '403':
          description: forbidden
  "/api/v1/auth/login":
    post:
      summary: User login
      tags:
      - Authentication
      parameters: []
      responses:
        '200':
          description: login successful
        '401':
          description: invalid credentials
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: admin@example.com
                password:
                  type: string
                  example: password123
              required:
              - email
              - password
  "/api/v1/auth/register":
    post:
      summary: User registration
      tags:
      - Authentication
      parameters: []
      responses:
        '201':
          description: user created
        '422':
          description: validation error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: password123
                name:
                  type: string
                  example: John Doe
              required:
              - email
              - password
              - name
  "/api/v1/products":
    get:
      summary: List products
      tags:
      - Products
      security:
      - bearerAuth: []
      parameters:
      - name: page
        in: query
        required: false
        description: Page number
        schema:
          type: integer
      - name: per_page
        in: query
        required: false
        description: Items per page
        schema:
          type: integer
      - name: category_id
        in: query
        required: false
        description: Filter by category ID
        schema:
          type: integer
      - name: search
        in: query
        required: false
        description: Search by name or description
        schema:
          type: string
      responses:
        '200':
          description: products list
        '401':
          description: unauthorized
    post:
      summary: Create product
      tags:
      - Products
      security:
      - bearerAuth: []
      parameters: []
      responses:
        '201':
          description: product created
        '403':
          description: forbidden
        '422':
          description: validation error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: iPhone 15 Pro
                description:
                  type: string
                  example: Latest iPhone model with advanced features
                price:
                  type: string
                  example: '999.99'
                stock:
                  type: integer
                  example: 50
                category_ids:
                  type: array
                  items:
                    type: integer
                  example:
                  - 1
                  - 2
                images:
                  type: array
                  items:
                    type: object
                    properties:
                      url:
                        type: string
                        example: https://example.com/image.jpg
              required:
              - name
              - description
              - price
              - stock
  "/api/v1/products/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: integer
    get:
      summary: Get product
      tags:
      - Products
      security:
      - bearerAuth: []
      responses:
        '200':
          description: product found
        '404':
          description: product not found
    put:
      summary: Update product
      tags:
      - Products
      security:
      - bearerAuth: []
      parameters: []
      responses:
        '200':
          description: product updated
        '403':
          description: forbidden
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Updated Product Name
                description:
                  type: string
                  example: Updated description
                price:
                  type: string
                  example: '89.99'
                stock:
                  type: integer
                  example: 75
    delete:
      summary: Delete product
      tags:
      - Products
      security:
      - bearerAuth: []
      responses:
        '204':
          description: product deleted
        '403':
          description: forbidden
  "/api/v1/purchases":
    get:
      summary: List purchases
      tags:
      - Purchases
      security:
      - bearerAuth: []
      parameters:
      - name: page
        in: query
        required: false
        description: Page number
        schema:
          type: integer
      - name: per_page
        in: query
        required: false
        description: Items per page
        schema:
          type: integer
      responses:
        '200':
          description: purchases list
        '403':
          description: forbidden
    post:
      summary: Create purchase
      tags:
      - Purchases
      security:
      - bearerAuth: []
      parameters: []
      responses:
        '201':
          description: purchase created
        '422':
          description: insufficient stock
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                customer:
                  type: object
                  properties:
                    name:
                      type: string
                      example: John Doe
                    email:
                      type: string
                      example: john@example.com
                    phone:
                      type: string
                      example: "+1234567890"
                  required:
                  - name
                  - email
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      product_id:
                        type: integer
                        example: 1
                      quantity:
                        type: integer
                        example: 2
                    required:
                    - product_id
                    - quantity
              required:
              - customer
              - items
  "/api/v1/purchases/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: integer
    get:
      summary: Get purchase
      tags:
      - Purchases
      security:
      - bearerAuth: []
      responses:
        '200':
          description: purchase found
        '404':
          description: purchase not found
servers:
- url: http://localhost:3000
  description: Development server
- url: https://api.kibernum-ecommerce.com
  description: Production server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
- bearerAuth: []
